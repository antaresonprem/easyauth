@using System.Globalization
@using System.Security.Claims
@using System.Web.Script.Serialization

<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width" />
  <meta http-equiv="X-UA-Compatible" content="IE=11" />
  <title>Easy Auth ACL Configuration</title>
  <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.0/js/bootstrap.min.js"></script>
  <script src="//ajax.aspnetcdn.com/ajax/jQuery/jquery-2.2.2.min.js"></script>
  <link rel="stylesheet" type="text/css" href="//netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css">
  <style>
    textarea {
      width: 100%;
      resize: none;
      min-height: 400px;
    }
  </style>
</head>
<body>
  <div class="container-fluid" style="margin: 20px">
    <div class="row">
      @{
        // This app requires access to the Azure AD Graph API
        string LoginUrl = "/.auth/login/aad?response_type=code id_token&resource=https://graph.windows.net&post_login_redirect_uri=" + this.Request.Url.AbsolutePath;
        string LogoutUrl = "/.auth/logout?post_logout_redirect_uri=" + this.Request.Url.AbsolutePath;
        string accessToken = this.Request.Headers["X-MS-TOKEN-AAD-ACCESS-TOKEN"];
        string tokenExpiration = this.Request.Headers["X-MS-TOKEN-AAD-EXPIRES-ON"];

        DateTime expiresOn;
        ClaimsPrincipal claimsPrincipal = ClaimsPrincipal.Current;
        if (claimsPrincipal == null ||
            !claimsPrincipal.Identity.IsAuthenticated ||
            string.IsNullOrEmpty(accessToken) ||
            !DateTime.TryParseExact(tokenExpiration, "o", CultureInfo.InvariantCulture, DateTimeStyles.None, out expiresOn) ||
            DateTime.Now >= expiresOn.ToLocalTime())
        {
          <span>Hello! Please <a href="@LoginUrl">log in</a>.</span>
          return;
        }

        // Fetch all groups in the tenant. This may be a very large number.
        HttpWebRequest request = WebRequest.CreateHttp("https://graph.windows.net/me/memberOf?$top=500&api-version=1.6");
        request.Headers.Add(HttpRequestHeader.Authorization, "Bearer " + accessToken);
        object[] groups;
        using (var response = request.GetResponse())
        {
          using (var responseStream = response.GetResponseStream())
          {
            using (var reader = new StreamReader(responseStream))
            {
              string jsonResponse = reader.ReadToEnd();
              var serializer = new JavaScriptSerializer();
              var deserializedResponseJson = (IDictionary<string, object>)serializer.DeserializeObject(jsonResponse);
              groups = (object[])deserializedResponseJson["value"];
            }
          }
        }

        // Filter down to just security groups.
        var securityGroups = new List<IDictionary<string, object>>(300);
        foreach (IDictionary<string, object> group in groups)
        {
          if ((bool)group["securityEnabled"])
          {
            securityGroups.Add(group);
          }
        }

        securityGroups.Sort((a, b) => ((string)a["displayName"]).CompareTo((string)b["displayName"]));
      }

      <div class="col-md-6">
        <div>
          <h4>Logged in as @claimsPrincipal.Identity.Name
            <small>(<a href="@LogoutUrl">logout</a>)</small>
         </h4>
        </div>
        <div class="input-group">
          <span class="input-group-addon">Filter</span>
          <input id="filter" type="text" class="form-control" placeholder="Type here...">
        </div>
        <table class="table table-striped">
          <tbody class="searchable">
            @foreach (IDictionary<string, object> group in securityGroups)
            {
              <tr>
                <td style="vertical-align: middle"><input type="checkbox" class="selector-checkbox" data-oid="@group["objectId"]" /></td>
                <td><h4>@group["displayName"]<br /><small>@group["description"]</small></h4></td>
                <td hidden>@group["objectId"]</td>
                <td hidden>@group["mailNickname"]</td>
              </tr>
            }
          </tbody>
        </table>
      </div>

      <div class="col-md-6">
        <h2>Configuration JSON</h2>
        <textarea id="output"></textarea>
      </div>

    </div>
  </div>
</body>
</html>
<script type="text/javascript">
  var groups = [];
  $(document).ready(function () {

    (function ($) {

      $('#filter').keyup(function () {

        var rex = new RegExp($(this).val(), 'i');
        $('.searchable tr').hide();
        $('.searchable tr').filter(function () {
          return rex.test($(this).text());
        }).show();

      });

      $('.selector-checkbox').on('click', refreshOutput);

    }(jQuery));

  });

  function refreshOutput() {
    // rebuild the groups list
    groups = [];
    $('.selector-checkbox:checked').each(function () {
      var oid = $(this).data('oid');
      groups.push(oid);
    });

    var json = { allowed_groups: groups };
    var textarea = $('#output')

    textarea.text(
      JSON.stringify(json, null, 2) // spacing level = 2
    );
  }
</script>